// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: talentrpc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Talent_RegisterAdminUser_FullMethodName  = "/pb.Talent/RegisterAdminUser"
	Talent_GetMenuFromAdminId_FullMethodName = "/pb.Talent/GetMenuFromAdminId"
)

// TalentClient is the client API for Talent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalentClient interface {
	RegisterAdminUser(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	GetMenuFromAdminId(ctx context.Context, in *GetMenuTreeReq, opts ...grpc.CallOption) (*GetMenuTreeResp, error)
}

type talentClient struct {
	cc grpc.ClientConnInterface
}

func NewTalentClient(cc grpc.ClientConnInterface) TalentClient {
	return &talentClient{cc}
}

func (c *talentClient) RegisterAdminUser(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Talent_RegisterAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentClient) GetMenuFromAdminId(ctx context.Context, in *GetMenuTreeReq, opts ...grpc.CallOption) (*GetMenuTreeResp, error) {
	out := new(GetMenuTreeResp)
	err := c.cc.Invoke(ctx, Talent_GetMenuFromAdminId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalentServer is the server API for Talent service.
// All implementations must embed UnimplementedTalentServer
// for forward compatibility
type TalentServer interface {
	RegisterAdminUser(context.Context, *RegisterReq) (*RegisterResp, error)
	GetMenuFromAdminId(context.Context, *GetMenuTreeReq) (*GetMenuTreeResp, error)
	mustEmbedUnimplementedTalentServer()
}

// UnimplementedTalentServer must be embedded to have forward compatible implementations.
type UnimplementedTalentServer struct {
}

func (UnimplementedTalentServer) RegisterAdminUser(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdminUser not implemented")
}
func (UnimplementedTalentServer) GetMenuFromAdminId(context.Context, *GetMenuTreeReq) (*GetMenuTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuFromAdminId not implemented")
}
func (UnimplementedTalentServer) mustEmbedUnimplementedTalentServer() {}

// UnsafeTalentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalentServer will
// result in compilation errors.
type UnsafeTalentServer interface {
	mustEmbedUnimplementedTalentServer()
}

func RegisterTalentServer(s grpc.ServiceRegistrar, srv TalentServer) {
	s.RegisterService(&Talent_ServiceDesc, srv)
}

func _Talent_RegisterAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServer).RegisterAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talent_RegisterAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServer).RegisterAdminUser(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talent_GetMenuFromAdminId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServer).GetMenuFromAdminId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talent_GetMenuFromAdminId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServer).GetMenuFromAdminId(ctx, req.(*GetMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Talent_ServiceDesc is the grpc.ServiceDesc for Talent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Talent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Talent",
	HandlerType: (*TalentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAdminUser",
			Handler:    _Talent_RegisterAdminUser_Handler,
		},
		{
			MethodName: "GetMenuFromAdminId",
			Handler:    _Talent_GetMenuFromAdminId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "talentrpc.proto",
}
